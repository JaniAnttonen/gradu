msc {
  a [label="Peer 1 (Prover)"],b [label="Peer 2 (Verifier)"];
  ---  [ label = "Set up RSA divider, upper_bound for verifier" ];
  |||;
  ---  [ label = "Start Diffie-Hellman with random primes" ];
  a->b [ label = "Key exchange" ];
  a<-b [ label = "Key exchange" ];
  ---  [ label = "Shared root g created" ];
  |||;
  ---  [ label = "Both start VDF calculation" ];
  |||;
  a=>b [ label = "X for Peer 2 to sign" ];
  |||;
  a->a [ label = "VDF(g, T=1)" ];
  b->b [ label = "VDF(g, T=1)" ];
  |||;
  ...;
  |||;
  a->a [ label = "VDF(g^(2*(upper_bound)), T=upper_bound)" ];
  b->b [ label = "VDF(g^(2*(upper_bound)), T=upper_bound)" ];
  |||;
  ---  [ label = "Verifier VDF completed" ];
  |||;
  b->b [ label = "Generate random prime cap, prove own VDF with it" ];
  a<<b [ label = "Verifier sends VDF proof to prover with cap" ];
  a->a [ label = "Verify verifier's VDF as correct" ];
  a->a [ label = "VDF(g^(2*n), T=n)" ];
  |||;
  ---  [ label = "Prover VDF completed" ];
  |||;
  a->a [ label = "Cap off VDF with verifier's cap, generate proof of VDF" ];
  a->a [ label = "Calculate difference between the two VDFs, defining latency in iterations" ];
  |||;
  ---  [ label = "Proof available to the network" ];
  |||;
}
